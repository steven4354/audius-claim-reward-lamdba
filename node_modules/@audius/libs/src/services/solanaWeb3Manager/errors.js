/**
 * All errors returned by RewardsManager
 */
const RewardsManagerError = {
  // The owner of the input isn't set to the program address generated by the program.
  INCORRECT_OWNER: 'INCORRECT_OWNER',

  // Signature with an already met principal
  SIGN_COLLISION: 'SIGN_COLLISION',

  // Unexpected signer met
  WRONG_SIGNER: 'WRONG_SIGNER',

  // Isn't enough signers keys
  NOT_ENOUGH_SIGNERS: 'NOT_ENOUGH_SIGNERS',

  // Secp256 instruction missing
  SECP256_INSTRUCTION_MISSING: 'SECP256_INSTRUCTION_MISSING',

  // Instruction load error
  INSTRUCTION_LOAD_ERROR: 'INSTRUCTION_LOAD_ERROR',

  // Repeated senders
  REPEATED_SENDERS: 'REPEATED_SENDERS',

  // Signature verification failed
  SIGNATURE_VERIFICATION_FAILED: 'SIGNATURE_VERIFICATION_FAILED',

  // Some signers have same operators
  OPERATOR_COLLISION: 'OPERATOR_COLLISION',

  // Funds already sent
  ALREADY_SENT: 'ALREADY_SENT',

  // Incorrect messages
  INCORRECT_MESSAGES: 'INCORRECT_MESSAGES',

  // Messages overflow
  MESSAGE_OVERFLOW: 'MESSAGE_OVERFLOW',

  // Math overflow
  MATH_OVERFLOW: 'MATH_OVERFLOW',

  // Invalid recipient
  INVALID_RECIPIENT: 'INVALID_RECIPIENT',

  // Unmapped error
  UNKNOWN: 'UNKNOWN',

  fromErrorCode: (code) => {
    const errors = [
      RewardsManagerError.INCORRECT_OWNER,
      RewardsManagerError.SIGN_COLLISION,
      RewardsManagerError.WRONG_SIGNER,
      RewardsManagerError.NOT_ENOUGH_SIGNERS,
      RewardsManagerError.SECP256_INSTRUCTION_MISSING,
      RewardsManagerError.INSTRUCTION_LOAD_ERROR,
      RewardsManagerError.REPEATED_SENDERS,
      RewardsManagerError.SIGNATURE_VERIFICATION_FAILED,
      RewardsManagerError.OPERATOR_COLLISION,
      RewardsManagerError.ALREADY_SENT,
      RewardsManagerError.INCORRECT_MESSAGES,
      RewardsManagerError.MESSAGE_OVERFLOW,
      RewardsManagerError.MATH_OVERFLOW,
      RewardsManagerError.INVALID_RECIPIENT
    ]
    return errors[code] || RewardsManagerError.UNKNOWN
  }
}

const ClaimableProgramError = {
  // Signature verification failed
  SIGNATURE_VERIFICATION_FAILED: 'SIGNATURE_VERIFICATION_FAILED',

  /// Secp256 instruction losing
  SECP256_INSTRUCTION_LOSING: 'SECP256_INSTRUCTION_LOSING',

  /// Instruction load error
  INSTRUCTION_LOAD_ERROR: 'INSTRUCTION_LOAD_ERROR',

  /// User nonce verification error
  NONCE_VERIFICATION_ERROR: 'NONCE_VERIFICATION_ERROR',

  // Unmapped error
  UNKNOWN: 'UNKNOWN',

  fromErrorCode: (code) => {
    const errors = [
      ClaimableProgramError.SIGNATURE_VERIFICATION_FAILED,
      ClaimableProgramError.SECP256_INSTRUCTION_LOSING,
      ClaimableProgramError.INSTRUCTION_LOAD_ERROR,
      ClaimableProgramError.NONCE_VERIFICATION_ERROR
    ]
    return errors[code] || ClaimableProgramError.UNKNOWN
  }
}

module.exports = {
  RewardsManagerError,
  ClaimableProgramError
}
