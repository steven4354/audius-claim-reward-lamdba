import { AxiosRequestConfig } from 'axios';

declare const AUDIO_DECMIALS = 18;
declare const WAUDIO_DECMIALS = 8;
declare const CURRENT_USER_EXISTS_LOCAL_STORAGE_KEY = "@audius/libs:found-user";
declare enum AuthHeaders {
    MESSAGE = "Encoded-Data-Message",
    SIGNATURE = "Encoded-Data-Signature"
}

declare type TimeFrame = 'day' | 'week' | 'month' | 'year' | 'millennium';
declare const getTrackListens: (timeFrame?: TimeFrame | null, idsArray?: number[] | null, startTime?: string | null, endTime?: string | null, limit?: number | null, offset?: number | null) => AxiosRequestConfig;

type requests$1_TimeFrame = TimeFrame;
declare const requests$1_getTrackListens: typeof getTrackListens;
declare namespace requests$1 {
  export {
    requests$1_TimeFrame as TimeFrame,
    requests$1_getTrackListens as getTrackListens,
  };
}

declare const getUsers: (limit?: number, offset?: number, idsArray?: string[] | undefined, walletAddress?: string | undefined, handle?: string | undefined, isCreator?: boolean | null, minBlockNumber?: number | undefined) => {
    endpoint: string;
    queryParams: {
        limit: number;
        offset: number;
        is_creator?: boolean | undefined;
        handle?: string | undefined;
        wallet?: string | undefined;
        min_block_number?: number | undefined;
        id?: string[] | undefined;
    };
};
declare const getTracks: (limit?: number, offset?: number, idsArray?: string[] | undefined, targetUserId?: string | undefined, sort?: boolean | undefined, minBlockNumber?: number | undefined, filterDeleted?: boolean | undefined, withUsers?: boolean) => {
    endpoint: string;
    queryParams: {
        limit: number;
        offset: number;
        id?: string[] | undefined;
        min_block_number?: number | undefined;
        user_id?: string | undefined;
        sort?: boolean | undefined;
        filter_deleted?: boolean | undefined;
        with_users?: boolean | undefined;
    };
};
declare const getTracksByHandleAndSlug: (handle: string, slug: string) => {
    endpoint: string;
    method: string;
    queryParams: {
        handle: string;
        slug: string;
    };
};
declare const getTracksIncludingUnlisted: (identifiers: string[], withUsers?: boolean) => {
    endpoint: string;
    method: string;
    data: {
        tracks: string[];
    };
    queryParams: {
        with_users?: boolean | undefined;
    };
};
declare const getRandomTracks: (genre: string, limit: number, exclusionList: number[], time: string) => {
    endpoint: string;
    queryParams: {
        genre: string;
        limit: number;
        exclusionList: number[];
        time: string;
    };
};
declare const getStemsForTrack: (trackId: number) => {
    endpoint: string;
    queryParams: {
        with_users: boolean;
    };
};
declare const getRemixesOfTrack: (trackId: number, limit?: number | null, offset?: number | null) => {
    endpoint: string;
    queryParams: {
        with_users: boolean;
        limit: number | null;
        offset: number | null;
    };
};
declare const getRemixTrackParents: (trackId: number, limit?: number | null, offset?: number | null) => {
    endpoint: string;
    queryParams: {
        with_users: boolean;
        limit: number | null;
        offset: number | null;
    };
};
declare const getTrendingTracks: (genre?: string | null, timeFrame?: string | null, idsArray?: number[] | null, limit?: number | null, offset?: number | null, withUsers?: boolean) => {
    endpoint: string;
    method: string;
    queryParams: {
        with_users?: true | undefined;
        genre?: string | undefined;
        offset?: number | undefined;
        limit?: number | undefined;
        id?: number[] | undefined;
    };
};
declare const getPlaylists: (limit?: number, offset?: number, idsArray?: null, targetUserId?: null, withUsers?: boolean) => {
    endpoint: string;
    queryParams: {
        with_users?: boolean | undefined;
        user_id?: undefined;
        playlist_id?: undefined;
        limit: number;
        offset: number;
    };
};
declare const getSocialFeed: (filter: string, limit?: number, offset?: number, withUsers?: boolean, tracksOnly?: boolean) => {
    endpoint: string;
    queryParams: {
        filter: string;
        limit: number;
        offset: number;
        with_users: boolean;
        tracks_only: boolean;
    };
};
declare const getUserRepostFeed: (userId: number, limit?: number, offset?: number, withUsers?: boolean) => {
    endpoint: string;
    urlParams: string;
    queryParams: {
        limit: number;
        offset: number;
        with_users: boolean;
    };
};
declare const getFollowIntersectionUsers: (limit: number | undefined, offset: number | undefined, followeeUserId: number, followerUserId: number) => {
    endpoint: string;
    urlParams: string;
    queryParams: {
        limit: number;
        offset: number;
    };
};
declare const getTrackRepostIntersectionUsers: (limit: number | undefined, offset: number | undefined, repostTrackId: number, followerUserId: number) => {
    endpoint: string;
    urlParams: string;
    queryParams: {
        limit: number;
        offset: number;
    };
};
declare const getPlaylistRepostIntersectionUsers: (limit: number | undefined, offset: number | undefined, repostPlaylistId: number, followerUserId: number) => {
    endpoint: string;
    urlParams: string;
    queryParams: {
        limit: number;
        offset: number;
    };
};
declare const getFollowersForUser: (limit: number | undefined, offset: number | undefined, followeeUserId: number) => {
    endpoint: string;
    urlParams: string;
    queryParams: {
        limit: number;
        offset: number;
    };
};
declare const getFolloweesForUser: (limit: number | undefined, offset: number | undefined, followerUserId: number) => {
    endpoint: string;
    urlParams: string;
    queryParams: {
        limit: number;
        offset: number;
    };
};
declare const getRepostersForTrack: (limit: number | undefined, offset: number | undefined, repostTrackId: number) => {
    endpoint: string;
    urlParams: string;
    queryParams: {
        limit: number;
        offset: number;
    };
};
declare const getRepostersForPlaylist: (limit: number | undefined, offset: number | undefined, repostPlaylistId: number) => {
    endpoint: string;
    urlParams: string;
    queryParams: {
        limit: number;
        offset: number;
    };
};
declare const getSaversForTrack: (limit: number | undefined, offset: number | undefined, saveTrackId: number) => {
    endpoint: string;
    urlParams: string;
    queryParams: {
        limit: number;
        offset: number;
    };
};
declare const getSaversForPlaylist: (limit: number | undefined, offset: number | undefined, savePlaylistId: number) => {
    endpoint: string;
    urlParams: string;
    queryParams: {
        limit: number;
        offset: number;
    };
};
declare const searchFull: (text: string, kind: string, limit?: number, offset?: number) => {
    endpoint: string;
    queryParams: {
        query: string;
        kind: string;
        limit: number;
        offset: number;
    };
};
declare const searchAutocomplete: (text: string, limit?: number, offset?: number) => {
    endpoint: string;
    queryParams: {
        query: string;
        limit: number;
        offset: number;
    };
};
declare const searchTags: (text: string, userTagCount?: number, kind?: string, limit?: number, offset?: number) => {
    endpoint: string;
    queryParams: {
        query: string;
        user_tag_count: number;
        kind: string;
        limit: number;
        offset: number;
    };
};
declare const getSavedPlaylists: (limit?: number, offset?: number, withUsers?: boolean) => {
    endpoint: string;
    queryParams: {
        limit: number;
        offset: number;
        with_users: boolean;
    };
};
declare const getSavedAlbums: (limit?: number, offset?: number, withUsers?: boolean) => {
    endpoint: string;
    queryParams: {
        limit: number;
        offset: number;
        with_users: boolean;
    };
};
declare const getSavedTracks: (limit?: number, offset?: number, withUsers?: boolean) => {
    endpoint: string;
    queryParams: {
        limit: number;
        offset: number;
        with_users: boolean;
    };
};
/**
 * Return user collections (saved & uploaded) along w/ users for those collections
 */
declare const getUserAccount: (wallet: string) => {
    endpoint: string;
    queryParams: {
        wallet: string;
    };
};
declare const getTopPlaylists: (type: string, limit: number, mood: string, filter: string, withUsers?: boolean) => {
    endpoint: string;
    queryParams: {
        limit: number;
        mood: string;
        filter: string;
        with_users: boolean;
    };
};
declare const getTopFolloweeWindowed: (type: string, window: string, limit: string, withUsers?: boolean) => {
    endpoint: string;
    queryParams: {
        limit: string;
        with_users: boolean;
    };
};
declare const getTopFolloweeSaves: (type: string, limit: string, withUsers?: boolean) => {
    endpoint: string;
    queryParams: {
        limit: string;
        with_users: boolean;
    };
};
declare const getLatest: (type: string) => {
    endpoint: string;
};
declare const getTopCreatorsByGenres: (genres: string[], limit?: number, offset?: number, withUsers?: boolean) => {
    endpoint: string;
    queryParams: {
        genre: string[];
        limit: number;
        offset: number;
        with_users: boolean;
    };
};
declare const getURSMContentNodes: (ownerWallet: string | null) => {
    endpoint: string;
    queryParams: {
        owner_wallet: string | null;
    };
};
declare const getNotifications: (minBlockNumber: string, trackIds: string[], timeout: number) => {
    endpoint: string;
    queryParams: {
        min_block_number: string;
        track_id: string[];
    };
    timeout: number;
};
declare const getSolanaNotifications: (minSlotNumber: number, timeout: number) => {
    endpoint: string;
    queryParams: {
        min_slot_number: number;
    };
    timeout: number;
};
declare const getTrackListenMilestones: (timeout: number) => {
    endpoint: string;
    timeout: number;
};
declare const getChallengeAttestation: (challengeId: string, encodedUserId: string, specifier: string, oracleAddress: string) => {
    endpoint: string;
    queryParams: {
        user_id: string;
        specifier: string;
        oracle: string;
    };
};
declare const getCreateSenderAttestation: (senderEthAddress: string) => {
    endpoint: string;
    queryParams: {
        sender_eth_address: string;
    };
};
declare const getUndisbursedChallenges: (limit: number | null, offset: number | null, completedBlockNumber: string | null, encodedUserId: number | null) => {
    endpoint: string;
    queryParams: {
        limit: number | null;
        offset: number | null;
        completed_blocknumber: string | null;
        user_id: number | null;
    };
};
declare const verifyToken: (token: string) => {
    endpoint: string;
    queryParams: {
        token: string;
    };
};

declare const requests_getUsers: typeof getUsers;
declare const requests_getTracks: typeof getTracks;
declare const requests_getTracksByHandleAndSlug: typeof getTracksByHandleAndSlug;
declare const requests_getTracksIncludingUnlisted: typeof getTracksIncludingUnlisted;
declare const requests_getRandomTracks: typeof getRandomTracks;
declare const requests_getStemsForTrack: typeof getStemsForTrack;
declare const requests_getRemixesOfTrack: typeof getRemixesOfTrack;
declare const requests_getRemixTrackParents: typeof getRemixTrackParents;
declare const requests_getTrendingTracks: typeof getTrendingTracks;
declare const requests_getPlaylists: typeof getPlaylists;
declare const requests_getSocialFeed: typeof getSocialFeed;
declare const requests_getUserRepostFeed: typeof getUserRepostFeed;
declare const requests_getFollowIntersectionUsers: typeof getFollowIntersectionUsers;
declare const requests_getTrackRepostIntersectionUsers: typeof getTrackRepostIntersectionUsers;
declare const requests_getPlaylistRepostIntersectionUsers: typeof getPlaylistRepostIntersectionUsers;
declare const requests_getFollowersForUser: typeof getFollowersForUser;
declare const requests_getFolloweesForUser: typeof getFolloweesForUser;
declare const requests_getRepostersForTrack: typeof getRepostersForTrack;
declare const requests_getRepostersForPlaylist: typeof getRepostersForPlaylist;
declare const requests_getSaversForTrack: typeof getSaversForTrack;
declare const requests_getSaversForPlaylist: typeof getSaversForPlaylist;
declare const requests_searchFull: typeof searchFull;
declare const requests_searchAutocomplete: typeof searchAutocomplete;
declare const requests_searchTags: typeof searchTags;
declare const requests_getSavedPlaylists: typeof getSavedPlaylists;
declare const requests_getSavedAlbums: typeof getSavedAlbums;
declare const requests_getSavedTracks: typeof getSavedTracks;
declare const requests_getUserAccount: typeof getUserAccount;
declare const requests_getTopPlaylists: typeof getTopPlaylists;
declare const requests_getTopFolloweeWindowed: typeof getTopFolloweeWindowed;
declare const requests_getTopFolloweeSaves: typeof getTopFolloweeSaves;
declare const requests_getLatest: typeof getLatest;
declare const requests_getTopCreatorsByGenres: typeof getTopCreatorsByGenres;
declare const requests_getURSMContentNodes: typeof getURSMContentNodes;
declare const requests_getNotifications: typeof getNotifications;
declare const requests_getSolanaNotifications: typeof getSolanaNotifications;
declare const requests_getTrackListenMilestones: typeof getTrackListenMilestones;
declare const requests_getChallengeAttestation: typeof getChallengeAttestation;
declare const requests_getCreateSenderAttestation: typeof getCreateSenderAttestation;
declare const requests_getUndisbursedChallenges: typeof getUndisbursedChallenges;
declare const requests_verifyToken: typeof verifyToken;
declare namespace requests {
  export {
    requests_getUsers as getUsers,
    requests_getTracks as getTracks,
    requests_getTracksByHandleAndSlug as getTracksByHandleAndSlug,
    requests_getTracksIncludingUnlisted as getTracksIncludingUnlisted,
    requests_getRandomTracks as getRandomTracks,
    requests_getStemsForTrack as getStemsForTrack,
    requests_getRemixesOfTrack as getRemixesOfTrack,
    requests_getRemixTrackParents as getRemixTrackParents,
    requests_getTrendingTracks as getTrendingTracks,
    requests_getPlaylists as getPlaylists,
    requests_getSocialFeed as getSocialFeed,
    requests_getUserRepostFeed as getUserRepostFeed,
    requests_getFollowIntersectionUsers as getFollowIntersectionUsers,
    requests_getTrackRepostIntersectionUsers as getTrackRepostIntersectionUsers,
    requests_getPlaylistRepostIntersectionUsers as getPlaylistRepostIntersectionUsers,
    requests_getFollowersForUser as getFollowersForUser,
    requests_getFolloweesForUser as getFolloweesForUser,
    requests_getRepostersForTrack as getRepostersForTrack,
    requests_getRepostersForPlaylist as getRepostersForPlaylist,
    requests_getSaversForTrack as getSaversForTrack,
    requests_getSaversForPlaylist as getSaversForPlaylist,
    requests_searchFull as searchFull,
    requests_searchAutocomplete as searchAutocomplete,
    requests_searchTags as searchTags,
    requests_getSavedPlaylists as getSavedPlaylists,
    requests_getSavedAlbums as getSavedAlbums,
    requests_getSavedTracks as getSavedTracks,
    requests_getUserAccount as getUserAccount,
    requests_getTopPlaylists as getTopPlaylists,
    requests_getTopFolloweeWindowed as getTopFolloweeWindowed,
    requests_getTopFolloweeSaves as getTopFolloweeSaves,
    requests_getLatest as getLatest,
    requests_getTopCreatorsByGenres as getTopCreatorsByGenres,
    requests_getURSMContentNodes as getURSMContentNodes,
    requests_getNotifications as getNotifications,
    requests_getSolanaNotifications as getSolanaNotifications,
    requests_getTrackListenMilestones as getTrackListenMilestones,
    requests_getChallengeAttestation as getChallengeAttestation,
    requests_getCreateSenderAttestation as getCreateSenderAttestation,
    requests_getUndisbursedChallenges as getUndisbursedChallenges,
    requests_verifyToken as verifyToken,
  };
}

export { AUDIO_DECMIALS, AuthHeaders, CURRENT_USER_EXISTS_LOCAL_STORAGE_KEY, requests as DiscoveryAPI, requests$1 as IdentityAPI, WAUDIO_DECMIALS };
