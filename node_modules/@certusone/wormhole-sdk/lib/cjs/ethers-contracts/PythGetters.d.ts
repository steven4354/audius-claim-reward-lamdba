/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PythGettersInterface extends ethers.utils.Interface {
  functions: {
    "governanceActionIsConsumed(bytes32)": FunctionFragment;
    "isInitialized(address)": FunctionFragment;
    "wormhole()": FunctionFragment;
    "chainId()": FunctionFragment;
    "governanceChainId()": FunctionFragment;
    "governanceContract()": FunctionFragment;
    "pyth2WormholeChainId()": FunctionFragment;
    "pyth2WormholeContract()": FunctionFragment;
    "latestAttestation(bytes32,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "governanceActionIsConsumed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "wormhole", values?: undefined): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "governanceChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pyth2WormholeChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pyth2WormholeContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestAttestation",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "governanceActionIsConsumed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wormhole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pyth2WormholeChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pyth2WormholeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestAttestation",
    data: BytesLike
  ): Result;

  events: {};
}

export class PythGetters extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PythGettersInterface;

  functions: {
    governanceActionIsConsumed(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isInitialized(impl: string, overrides?: CallOverrides): Promise<[boolean]>;

    wormhole(overrides?: CallOverrides): Promise<[string]>;

    chainId(overrides?: CallOverrides): Promise<[number]>;

    governanceChainId(overrides?: CallOverrides): Promise<[number]>;

    governanceContract(overrides?: CallOverrides): Promise<[string]>;

    pyth2WormholeChainId(overrides?: CallOverrides): Promise<[number]>;

    pyth2WormholeContract(overrides?: CallOverrides): Promise<[string]>;

    latestAttestation(
      product: BytesLike,
      priceType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          number,
          number,
          number,
          string,
          string,
          number,
          BigNumber,
          number,
          [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          },
          BigNumber,
          number,
          number,
          BigNumber
        ] & {
          magic: number;
          version: number;
          payloadId: number;
          productId: string;
          priceId: string;
          priceType: number;
          price: BigNumber;
          exponent: number;
          twap: [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          };
          twac: [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          };
          confidenceInterval: BigNumber;
          status: number;
          corpAct: number;
          timestamp: BigNumber;
        }
      ] & {
        attestation: [
          number,
          number,
          number,
          string,
          string,
          number,
          BigNumber,
          number,
          [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          },
          BigNumber,
          number,
          number,
          BigNumber
        ] & {
          magic: number;
          version: number;
          payloadId: number;
          productId: string;
          priceId: string;
          priceType: number;
          price: BigNumber;
          exponent: number;
          twap: [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          };
          twac: [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          };
          confidenceInterval: BigNumber;
          status: number;
          corpAct: number;
          timestamp: BigNumber;
        };
      }
    >;
  };

  governanceActionIsConsumed(
    hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isInitialized(impl: string, overrides?: CallOverrides): Promise<boolean>;

  wormhole(overrides?: CallOverrides): Promise<string>;

  chainId(overrides?: CallOverrides): Promise<number>;

  governanceChainId(overrides?: CallOverrides): Promise<number>;

  governanceContract(overrides?: CallOverrides): Promise<string>;

  pyth2WormholeChainId(overrides?: CallOverrides): Promise<number>;

  pyth2WormholeContract(overrides?: CallOverrides): Promise<string>;

  latestAttestation(
    product: BytesLike,
    priceType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      string,
      string,
      number,
      BigNumber,
      number,
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        numerator: BigNumber;
        denominator: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        numerator: BigNumber;
        denominator: BigNumber;
      },
      BigNumber,
      number,
      number,
      BigNumber
    ] & {
      magic: number;
      version: number;
      payloadId: number;
      productId: string;
      priceId: string;
      priceType: number;
      price: BigNumber;
      exponent: number;
      twap: [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        numerator: BigNumber;
        denominator: BigNumber;
      };
      twac: [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        numerator: BigNumber;
        denominator: BigNumber;
      };
      confidenceInterval: BigNumber;
      status: number;
      corpAct: number;
      timestamp: BigNumber;
    }
  >;

  callStatic: {
    governanceActionIsConsumed(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isInitialized(impl: string, overrides?: CallOverrides): Promise<boolean>;

    wormhole(overrides?: CallOverrides): Promise<string>;

    chainId(overrides?: CallOverrides): Promise<number>;

    governanceChainId(overrides?: CallOverrides): Promise<number>;

    governanceContract(overrides?: CallOverrides): Promise<string>;

    pyth2WormholeChainId(overrides?: CallOverrides): Promise<number>;

    pyth2WormholeContract(overrides?: CallOverrides): Promise<string>;

    latestAttestation(
      product: BytesLike,
      priceType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        string,
        string,
        number,
        BigNumber,
        number,
        [BigNumber, BigNumber, BigNumber] & {
          value: BigNumber;
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          value: BigNumber;
          numerator: BigNumber;
          denominator: BigNumber;
        },
        BigNumber,
        number,
        number,
        BigNumber
      ] & {
        magic: number;
        version: number;
        payloadId: number;
        productId: string;
        priceId: string;
        priceType: number;
        price: BigNumber;
        exponent: number;
        twap: [BigNumber, BigNumber, BigNumber] & {
          value: BigNumber;
          numerator: BigNumber;
          denominator: BigNumber;
        };
        twac: [BigNumber, BigNumber, BigNumber] & {
          value: BigNumber;
          numerator: BigNumber;
          denominator: BigNumber;
        };
        confidenceInterval: BigNumber;
        status: number;
        corpAct: number;
        timestamp: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    governanceActionIsConsumed(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(impl: string, overrides?: CallOverrides): Promise<BigNumber>;

    wormhole(overrides?: CallOverrides): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    governanceChainId(overrides?: CallOverrides): Promise<BigNumber>;

    governanceContract(overrides?: CallOverrides): Promise<BigNumber>;

    pyth2WormholeChainId(overrides?: CallOverrides): Promise<BigNumber>;

    pyth2WormholeContract(overrides?: CallOverrides): Promise<BigNumber>;

    latestAttestation(
      product: BytesLike,
      priceType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    governanceActionIsConsumed(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(
      impl: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wormhole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pyth2WormholeChainId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pyth2WormholeContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestAttestation(
      product: BytesLike,
      priceType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
