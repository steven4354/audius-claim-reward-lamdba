/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MockPythImplementationInterface extends ethers.utils.Interface {
  functions: {
    "attestPrice(bytes)": FunctionFragment;
    "chainId()": FunctionFragment;
    "governanceActionIsConsumed(bytes32)": FunctionFragment;
    "governanceChainId()": FunctionFragment;
    "governanceContract()": FunctionFragment;
    "isInitialized(address)": FunctionFragment;
    "latestAttestation(bytes32,uint8)": FunctionFragment;
    "parseContractUpgrade(bytes)": FunctionFragment;
    "parsePriceAttestation(bytes)": FunctionFragment;
    "pyth2WormholeChainId()": FunctionFragment;
    "pyth2WormholeContract()": FunctionFragment;
    "upgrade(bytes)": FunctionFragment;
    "verifyPythVM(tuple)": FunctionFragment;
    "wormhole()": FunctionFragment;
    "initialize()": FunctionFragment;
    "testNewImplementationActive()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "attestPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "governanceActionIsConsumed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "latestAttestation",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "parseContractUpgrade",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parsePriceAttestation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pyth2WormholeChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pyth2WormholeContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgrade", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "verifyPythVM",
    values: [
      {
        version: BigNumberish;
        timestamp: BigNumberish;
        nonce: BigNumberish;
        emitterChainId: BigNumberish;
        emitterAddress: BytesLike;
        sequence: BigNumberish;
        consistencyLevel: BigNumberish;
        payload: BytesLike;
        guardianSetIndex: BigNumberish;
        signatures: {
          r: BytesLike;
          s: BytesLike;
          v: BigNumberish;
          guardianIndex: BigNumberish;
        }[];
        hash: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "wormhole", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testNewImplementationActive",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "attestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceActionIsConsumed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseContractUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parsePriceAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pyth2WormholeChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pyth2WormholeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyPythVM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wormhole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testNewImplementationActive",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "ContractUpgraded(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export class MockPythImplementation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockPythImplementationInterface;

  functions: {
    attestPrice(
      encodedVm: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chainId(overrides?: CallOverrides): Promise<[number]>;

    governanceActionIsConsumed(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    governanceChainId(overrides?: CallOverrides): Promise<[number]>;

    governanceContract(overrides?: CallOverrides): Promise<[string]>;

    isInitialized(impl: string, overrides?: CallOverrides): Promise<[boolean]>;

    latestAttestation(
      product: BytesLike,
      priceType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          number,
          number,
          number,
          string,
          string,
          number,
          BigNumber,
          number,
          [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          },
          BigNumber,
          number,
          number,
          BigNumber
        ] & {
          magic: number;
          version: number;
          payloadId: number;
          productId: string;
          priceId: string;
          priceType: number;
          price: BigNumber;
          exponent: number;
          twap: [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          };
          twac: [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          };
          confidenceInterval: BigNumber;
          status: number;
          corpAct: number;
          timestamp: BigNumber;
        }
      ] & {
        attestation: [
          number,
          number,
          number,
          string,
          string,
          number,
          BigNumber,
          number,
          [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          },
          BigNumber,
          number,
          number,
          BigNumber
        ] & {
          magic: number;
          version: number;
          payloadId: number;
          productId: string;
          priceId: string;
          priceType: number;
          price: BigNumber;
          exponent: number;
          twap: [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          };
          twac: [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          };
          confidenceInterval: BigNumber;
          status: number;
          corpAct: number;
          timestamp: BigNumber;
        };
      }
    >;

    parseContractUpgrade(
      encodedUpgrade: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, number, number, string] & {
          module: string;
          action: number;
          chain: number;
          newContract: string;
        }
      ] & {
        cu: [string, number, number, string] & {
          module: string;
          action: number;
          chain: number;
          newContract: string;
        };
      }
    >;

    parsePriceAttestation(
      encodedPriceAttestation: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          number,
          number,
          number,
          string,
          string,
          number,
          BigNumber,
          number,
          [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          },
          BigNumber,
          number,
          number,
          BigNumber
        ] & {
          magic: number;
          version: number;
          payloadId: number;
          productId: string;
          priceId: string;
          priceType: number;
          price: BigNumber;
          exponent: number;
          twap: [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          };
          twac: [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          };
          confidenceInterval: BigNumber;
          status: number;
          corpAct: number;
          timestamp: BigNumber;
        }
      ] & {
        pa: [
          number,
          number,
          number,
          string,
          string,
          number,
          BigNumber,
          number,
          [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          },
          BigNumber,
          number,
          number,
          BigNumber
        ] & {
          magic: number;
          version: number;
          payloadId: number;
          productId: string;
          priceId: string;
          priceType: number;
          price: BigNumber;
          exponent: number;
          twap: [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          };
          twac: [BigNumber, BigNumber, BigNumber] & {
            value: BigNumber;
            numerator: BigNumber;
            denominator: BigNumber;
          };
          confidenceInterval: BigNumber;
          status: number;
          corpAct: number;
          timestamp: BigNumber;
        };
      }
    >;

    pyth2WormholeChainId(overrides?: CallOverrides): Promise<[number]>;

    pyth2WormholeContract(overrides?: CallOverrides): Promise<[string]>;

    upgrade(
      encodedVM: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyPythVM(
      vm: {
        version: BigNumberish;
        timestamp: BigNumberish;
        nonce: BigNumberish;
        emitterChainId: BigNumberish;
        emitterAddress: BytesLike;
        sequence: BigNumberish;
        consistencyLevel: BigNumberish;
        payload: BytesLike;
        guardianSetIndex: BigNumberish;
        signatures: {
          r: BytesLike;
          s: BytesLike;
          v: BigNumberish;
          guardianIndex: BigNumberish;
        }[];
        hash: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[boolean] & { valid: boolean }>;

    wormhole(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testNewImplementationActive(overrides?: CallOverrides): Promise<[boolean]>;
  };

  attestPrice(
    encodedVm: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chainId(overrides?: CallOverrides): Promise<number>;

  governanceActionIsConsumed(
    hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  governanceChainId(overrides?: CallOverrides): Promise<number>;

  governanceContract(overrides?: CallOverrides): Promise<string>;

  isInitialized(impl: string, overrides?: CallOverrides): Promise<boolean>;

  latestAttestation(
    product: BytesLike,
    priceType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      string,
      string,
      number,
      BigNumber,
      number,
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        numerator: BigNumber;
        denominator: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        numerator: BigNumber;
        denominator: BigNumber;
      },
      BigNumber,
      number,
      number,
      BigNumber
    ] & {
      magic: number;
      version: number;
      payloadId: number;
      productId: string;
      priceId: string;
      priceType: number;
      price: BigNumber;
      exponent: number;
      twap: [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        numerator: BigNumber;
        denominator: BigNumber;
      };
      twac: [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        numerator: BigNumber;
        denominator: BigNumber;
      };
      confidenceInterval: BigNumber;
      status: number;
      corpAct: number;
      timestamp: BigNumber;
    }
  >;

  parseContractUpgrade(
    encodedUpgrade: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number, string] & {
      module: string;
      action: number;
      chain: number;
      newContract: string;
    }
  >;

  parsePriceAttestation(
    encodedPriceAttestation: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      string,
      string,
      number,
      BigNumber,
      number,
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        numerator: BigNumber;
        denominator: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        numerator: BigNumber;
        denominator: BigNumber;
      },
      BigNumber,
      number,
      number,
      BigNumber
    ] & {
      magic: number;
      version: number;
      payloadId: number;
      productId: string;
      priceId: string;
      priceType: number;
      price: BigNumber;
      exponent: number;
      twap: [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        numerator: BigNumber;
        denominator: BigNumber;
      };
      twac: [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        numerator: BigNumber;
        denominator: BigNumber;
      };
      confidenceInterval: BigNumber;
      status: number;
      corpAct: number;
      timestamp: BigNumber;
    }
  >;

  pyth2WormholeChainId(overrides?: CallOverrides): Promise<number>;

  pyth2WormholeContract(overrides?: CallOverrides): Promise<string>;

  upgrade(
    encodedVM: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyPythVM(
    vm: {
      version: BigNumberish;
      timestamp: BigNumberish;
      nonce: BigNumberish;
      emitterChainId: BigNumberish;
      emitterAddress: BytesLike;
      sequence: BigNumberish;
      consistencyLevel: BigNumberish;
      payload: BytesLike;
      guardianSetIndex: BigNumberish;
      signatures: {
        r: BytesLike;
        s: BytesLike;
        v: BigNumberish;
        guardianIndex: BigNumberish;
      }[];
      hash: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  wormhole(overrides?: CallOverrides): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testNewImplementationActive(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    attestPrice(
      encodedVm: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        string,
        string,
        number,
        BigNumber,
        number,
        [BigNumber, BigNumber, BigNumber] & {
          value: BigNumber;
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          value: BigNumber;
          numerator: BigNumber;
          denominator: BigNumber;
        },
        BigNumber,
        number,
        number,
        BigNumber
      ] & {
        magic: number;
        version: number;
        payloadId: number;
        productId: string;
        priceId: string;
        priceType: number;
        price: BigNumber;
        exponent: number;
        twap: [BigNumber, BigNumber, BigNumber] & {
          value: BigNumber;
          numerator: BigNumber;
          denominator: BigNumber;
        };
        twac: [BigNumber, BigNumber, BigNumber] & {
          value: BigNumber;
          numerator: BigNumber;
          denominator: BigNumber;
        };
        confidenceInterval: BigNumber;
        status: number;
        corpAct: number;
        timestamp: BigNumber;
      }
    >;

    chainId(overrides?: CallOverrides): Promise<number>;

    governanceActionIsConsumed(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    governanceChainId(overrides?: CallOverrides): Promise<number>;

    governanceContract(overrides?: CallOverrides): Promise<string>;

    isInitialized(impl: string, overrides?: CallOverrides): Promise<boolean>;

    latestAttestation(
      product: BytesLike,
      priceType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        string,
        string,
        number,
        BigNumber,
        number,
        [BigNumber, BigNumber, BigNumber] & {
          value: BigNumber;
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          value: BigNumber;
          numerator: BigNumber;
          denominator: BigNumber;
        },
        BigNumber,
        number,
        number,
        BigNumber
      ] & {
        magic: number;
        version: number;
        payloadId: number;
        productId: string;
        priceId: string;
        priceType: number;
        price: BigNumber;
        exponent: number;
        twap: [BigNumber, BigNumber, BigNumber] & {
          value: BigNumber;
          numerator: BigNumber;
          denominator: BigNumber;
        };
        twac: [BigNumber, BigNumber, BigNumber] & {
          value: BigNumber;
          numerator: BigNumber;
          denominator: BigNumber;
        };
        confidenceInterval: BigNumber;
        status: number;
        corpAct: number;
        timestamp: BigNumber;
      }
    >;

    parseContractUpgrade(
      encodedUpgrade: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, string] & {
        module: string;
        action: number;
        chain: number;
        newContract: string;
      }
    >;

    parsePriceAttestation(
      encodedPriceAttestation: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        string,
        string,
        number,
        BigNumber,
        number,
        [BigNumber, BigNumber, BigNumber] & {
          value: BigNumber;
          numerator: BigNumber;
          denominator: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber] & {
          value: BigNumber;
          numerator: BigNumber;
          denominator: BigNumber;
        },
        BigNumber,
        number,
        number,
        BigNumber
      ] & {
        magic: number;
        version: number;
        payloadId: number;
        productId: string;
        priceId: string;
        priceType: number;
        price: BigNumber;
        exponent: number;
        twap: [BigNumber, BigNumber, BigNumber] & {
          value: BigNumber;
          numerator: BigNumber;
          denominator: BigNumber;
        };
        twac: [BigNumber, BigNumber, BigNumber] & {
          value: BigNumber;
          numerator: BigNumber;
          denominator: BigNumber;
        };
        confidenceInterval: BigNumber;
        status: number;
        corpAct: number;
        timestamp: BigNumber;
      }
    >;

    pyth2WormholeChainId(overrides?: CallOverrides): Promise<number>;

    pyth2WormholeContract(overrides?: CallOverrides): Promise<string>;

    upgrade(encodedVM: BytesLike, overrides?: CallOverrides): Promise<void>;

    verifyPythVM(
      vm: {
        version: BigNumberish;
        timestamp: BigNumberish;
        nonce: BigNumberish;
        emitterChainId: BigNumberish;
        emitterAddress: BytesLike;
        sequence: BigNumberish;
        consistencyLevel: BigNumberish;
        payload: BytesLike;
        guardianSetIndex: BigNumberish;
        signatures: {
          r: BytesLike;
          s: BytesLike;
          v: BigNumberish;
          guardianIndex: BigNumberish;
        }[];
        hash: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    wormhole(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    testNewImplementationActive(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    ContractUpgraded(
      oldContract?: string | null,
      newContract?: string | null
    ): TypedEventFilter<
      [string, string],
      { oldContract: string; newContract: string }
    >;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;
  };

  estimateGas: {
    attestPrice(
      encodedVm: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    governanceActionIsConsumed(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governanceChainId(overrides?: CallOverrides): Promise<BigNumber>;

    governanceContract(overrides?: CallOverrides): Promise<BigNumber>;

    isInitialized(impl: string, overrides?: CallOverrides): Promise<BigNumber>;

    latestAttestation(
      product: BytesLike,
      priceType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parseContractUpgrade(
      encodedUpgrade: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parsePriceAttestation(
      encodedPriceAttestation: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pyth2WormholeChainId(overrides?: CallOverrides): Promise<BigNumber>;

    pyth2WormholeContract(overrides?: CallOverrides): Promise<BigNumber>;

    upgrade(
      encodedVM: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyPythVM(
      vm: {
        version: BigNumberish;
        timestamp: BigNumberish;
        nonce: BigNumberish;
        emitterChainId: BigNumberish;
        emitterAddress: BytesLike;
        sequence: BigNumberish;
        consistencyLevel: BigNumberish;
        payload: BytesLike;
        guardianSetIndex: BigNumberish;
        signatures: {
          r: BytesLike;
          s: BytesLike;
          v: BigNumberish;
          guardianIndex: BigNumberish;
        }[];
        hash: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wormhole(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testNewImplementationActive(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    attestPrice(
      encodedVm: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceActionIsConsumed(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(
      impl: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestAttestation(
      product: BytesLike,
      priceType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parseContractUpgrade(
      encodedUpgrade: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parsePriceAttestation(
      encodedPriceAttestation: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pyth2WormholeChainId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pyth2WormholeContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgrade(
      encodedVM: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyPythVM(
      vm: {
        version: BigNumberish;
        timestamp: BigNumberish;
        nonce: BigNumberish;
        emitterChainId: BigNumberish;
        emitterAddress: BytesLike;
        sequence: BigNumberish;
        consistencyLevel: BigNumberish;
        payload: BytesLike;
        guardianSetIndex: BigNumberish;
        signatures: {
          r: BytesLike;
          s: BytesLike;
          v: BigNumberish;
          guardianIndex: BigNumberish;
        }[];
        hash: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wormhole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testNewImplementationActive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
