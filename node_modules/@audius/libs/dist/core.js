'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var AUDIO_DECMIALS = 18;
var WAUDIO_DECMIALS = 8;
var CURRENT_USER_EXISTS_LOCAL_STORAGE_KEY = '@audius/libs:found-user';
exports.AuthHeaders = void 0;

(function (AuthHeaders) {
  AuthHeaders["MESSAGE"] = "Encoded-Data-Message";
  AuthHeaders["SIGNATURE"] = "Encoded-Data-Signature";
})(exports.AuthHeaders || (exports.AuthHeaders = {}));

var getTrackListens = function getTrackListens() {
  var timeFrame = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var idsArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var startTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var endTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var limit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  var offset = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
  var queryUrl = 'tracks/listens/';

  if (timeFrame != null) {
    switch (timeFrame) {
      case 'day':
      case 'week':
      case 'month':
      case 'year':
      case 'millennium':
        break;

      default:
        throw new Error('Invalid timeFrame value provided');
    }

    queryUrl += timeFrame;
  }

  var queryParams = {};

  if (idsArray !== null) {
    queryParams.id = idsArray;
  }

  if (limit !== null) {
    queryParams.limit = limit;
  }

  if (offset !== null) {
    queryParams.offset = offset;
  }

  if (startTime != null) {
    queryParams.start = startTime;
  }

  if (endTime != null) {
    queryParams.end = endTime;
  }

  var req = {
    url: queryUrl,
    method: 'get',
    params: queryParams
  };
  return req;
};

var requests$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    getTrackListens: getTrackListens
});

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/* eslint-disable @typescript-eslint/restrict-plus-operands */
var getUsers = function getUsers() {
  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var idsArray = arguments.length > 2 ? arguments[2] : undefined;
  var walletAddress = arguments.length > 3 ? arguments[3] : undefined;
  var handle = arguments.length > 4 ? arguments[4] : undefined;
  var isCreator = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
  var minBlockNumber = arguments.length > 6 ? arguments[6] : undefined;
  var queryParams = {
    limit: limit,
    offset: offset
  };

  if (isCreator !== null) {
    queryParams.is_creator = isCreator;
  }

  if (handle) {
    queryParams.handle = handle;
  }

  if (walletAddress) {
    queryParams.wallet = walletAddress;
  }

  if (minBlockNumber) {
    queryParams.min_block_number = minBlockNumber;
  }

  if (idsArray != null) {
    if (!Array.isArray(idsArray)) {
      throw new Error('Expected integer array of user ids');
    }

    queryParams.id = idsArray;
  }

  var req = {
    endpoint: 'users',
    queryParams: queryParams
  };
  return req;
};
var getTracks = function getTracks() {
  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var idsArray = arguments.length > 2 ? arguments[2] : undefined;
  var targetUserId = arguments.length > 3 ? arguments[3] : undefined;
  var sort = arguments.length > 4 ? arguments[4] : undefined;
  var minBlockNumber = arguments.length > 5 ? arguments[5] : undefined;
  var filterDeleted = arguments.length > 6 ? arguments[6] : undefined;
  var withUsers = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;
  var queryParams = {
    limit: limit,
    offset: offset
  };

  if (idsArray) {
    if (!Array.isArray(idsArray)) {
      throw new Error('Expected array of track ids');
    }

    queryParams.id = idsArray;
  }

  if (minBlockNumber) {
    queryParams.min_block_number = minBlockNumber;
  }

  if (targetUserId) {
    queryParams.user_id = targetUserId;
  }

  if (sort) {
    queryParams.sort = sort;
  }

  if (typeof filterDeleted === 'boolean') {
    queryParams.filter_deleted = filterDeleted;
  }

  if (withUsers) {
    queryParams.with_users = true;
  }

  var req = {
    endpoint: 'tracks',
    queryParams: queryParams
  };
  return req;
};
var getTracksByHandleAndSlug = function getTracksByHandleAndSlug(handle, slug) {
  return {
    endpoint: 'v1/tracks',
    method: 'get',
    queryParams: {
      handle: handle,
      slug: slug
    }
  };
};
var getTracksIncludingUnlisted = function getTracksIncludingUnlisted(identifiers) {
  var withUsers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var queryParams = {};

  if (withUsers) {
    queryParams.with_users = true;
  }

  var req = {
    endpoint: 'tracks_including_unlisted',
    method: 'post',
    data: {
      tracks: identifiers
    },
    queryParams: queryParams
  };
  return req;
};
var getRandomTracks = function getRandomTracks(genre, limit, exclusionList, time) {
  var req = {
    endpoint: 'tracks/random',
    queryParams: {
      genre: genre,
      limit: limit,
      exclusionList: exclusionList,
      time: time
    }
  };
  return req;
};
var getStemsForTrack = function getStemsForTrack(trackId) {
  var req = {
    endpoint: "stems/".concat(trackId),
    queryParams: {
      with_users: true
    }
  };
  return req;
};
var getRemixesOfTrack = function getRemixesOfTrack(trackId) {
  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var req = {
    endpoint: "remixes/".concat(trackId, "/children"),
    queryParams: {
      with_users: true,
      limit: limit,
      offset: offset
    }
  };
  return req;
};
var getRemixTrackParents = function getRemixTrackParents(trackId) {
  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var req = {
    endpoint: "remixes/".concat(trackId, "/parents"),
    queryParams: {
      with_users: true,
      limit: limit,
      offset: offset
    }
  };
  return req;
};
var getTrendingTracks = function getTrendingTracks() {
  var genre = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var timeFrame = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var idsArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  var withUsers = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
  var endpoint = '/trending/';

  if (timeFrame != null) {
    switch (timeFrame) {
      case 'day':
      case 'week':
      case 'month':
      case 'year':
        break;

      default:
        throw new Error('Invalid timeFrame value provided');
    }

    endpoint += "".concat(endpoint).concat(timeFrame);
  }

  var req = {
    endpoint: endpoint,
    method: 'get',
    queryParams: _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, idsArray !== null ? {
      id: idsArray
    } : {}), limit !== null ? {
      limit: limit
    } : {}), offset !== null ? {
      offset: offset
    } : {}), genre !== null ? {
      genre: genre
    } : {}), withUsers ? {
      with_users: withUsers
    } : {})
  };
  return req;
};
var getPlaylists = function getPlaylists() {
  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var idsArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var targetUserId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var withUsers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

  if (idsArray != null) {
    if (!Array.isArray(idsArray)) {
      throw new Error('Expected integer array of user ids');
    }
  }

  return {
    endpoint: 'playlists',
    queryParams: _objectSpread2(_objectSpread2(_objectSpread2({
      limit: limit,
      offset: offset
    }, idsArray != null ? {
      playlist_id: idsArray
    } : {}), targetUserId ? {
      user_id: targetUserId
    } : {}), withUsers ? {
      with_users: true
    } : {})
  };
};
var getSocialFeed = function getSocialFeed(filter) {
  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var withUsers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var tracksOnly = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  return {
    endpoint: 'feed',
    queryParams: {
      filter: filter,
      limit: limit,
      offset: offset,
      with_users: withUsers,
      tracks_only: tracksOnly
    }
  };
};
var getUserRepostFeed = function getUserRepostFeed(userId) {
  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var withUsers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  return {
    endpoint: 'feed',
    urlParams: '/reposts/' + userId,
    queryParams: {
      limit: limit,
      offset: offset,
      with_users: withUsers
    }
  };
};
var getFollowIntersectionUsers = function getFollowIntersectionUsers() {
  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var followeeUserId = arguments.length > 2 ? arguments[2] : undefined;
  var followerUserId = arguments.length > 3 ? arguments[3] : undefined;
  return {
    endpoint: 'users',
    urlParams: '/intersection/follow/' + followeeUserId + '/' + followerUserId,
    queryParams: {
      limit: limit,
      offset: offset
    }
  };
};
var getTrackRepostIntersectionUsers = function getTrackRepostIntersectionUsers() {
  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var repostTrackId = arguments.length > 2 ? arguments[2] : undefined;
  var followerUserId = arguments.length > 3 ? arguments[3] : undefined;
  return {
    endpoint: 'users',
    urlParams: '/intersection/repost/track/' + repostTrackId + '/' + followerUserId,
    queryParams: {
      limit: limit,
      offset: offset
    }
  };
};
var getPlaylistRepostIntersectionUsers = function getPlaylistRepostIntersectionUsers() {
  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var repostPlaylistId = arguments.length > 2 ? arguments[2] : undefined;
  var followerUserId = arguments.length > 3 ? arguments[3] : undefined;
  return {
    endpoint: 'users',
    urlParams: '/intersection/repost/playlist/' + repostPlaylistId + '/' + followerUserId,
    queryParams: {
      limit: limit,
      offset: offset
    }
  };
};
var getFollowersForUser = function getFollowersForUser() {
  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var followeeUserId = arguments.length > 2 ? arguments[2] : undefined;
  return {
    endpoint: 'users',
    urlParams: '/followers/' + followeeUserId,
    queryParams: {
      limit: limit,
      offset: offset
    }
  };
};
var getFolloweesForUser = function getFolloweesForUser() {
  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var followerUserId = arguments.length > 2 ? arguments[2] : undefined;
  return {
    endpoint: 'users',
    urlParams: '/followees/' + followerUserId,
    queryParams: {
      limit: limit,
      offset: offset
    }
  };
};
var getRepostersForTrack = function getRepostersForTrack() {
  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var repostTrackId = arguments.length > 2 ? arguments[2] : undefined;
  return {
    endpoint: 'users',
    urlParams: '/reposts/track/' + repostTrackId,
    queryParams: {
      limit: limit,
      offset: offset
    }
  };
};
var getRepostersForPlaylist = function getRepostersForPlaylist() {
  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var repostPlaylistId = arguments.length > 2 ? arguments[2] : undefined;
  return {
    endpoint: 'users',
    urlParams: '/reposts/playlist/' + repostPlaylistId,
    queryParams: {
      limit: limit,
      offset: offset
    }
  };
};
var getSaversForTrack = function getSaversForTrack() {
  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var saveTrackId = arguments.length > 2 ? arguments[2] : undefined;
  return {
    endpoint: 'users',
    urlParams: '/saves/track/' + saveTrackId,
    queryParams: {
      limit: limit,
      offset: offset
    }
  };
};
var getSaversForPlaylist = function getSaversForPlaylist() {
  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var savePlaylistId = arguments.length > 2 ? arguments[2] : undefined;
  return {
    endpoint: 'users',
    urlParams: '/saves/playlist/' + savePlaylistId,
    queryParams: {
      limit: limit,
      offset: offset
    }
  };
};
var searchFull = function searchFull(text, kind) {
  var limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;
  var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  return {
    endpoint: 'search/full',
    queryParams: {
      query: text,
      kind: kind,
      limit: limit,
      offset: offset
    }
  };
};
var searchAutocomplete = function searchAutocomplete(text) {
  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  return {
    endpoint: 'search/autocomplete',
    queryParams: {
      query: text,
      limit: limit,
      offset: offset
    }
  };
};
var searchTags = function searchTags(text) {
  var userTagCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  var kind = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'all';
  var limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 100;
  var offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  return {
    endpoint: 'search/tags',
    queryParams: {
      query: text,
      user_tag_count: userTagCount,
      kind: kind,
      limit: limit,
      offset: offset
    }
  };
};
var getSavedPlaylists = function getSavedPlaylists() {
  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var withUsers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  return {
    endpoint: 'saves/playlists',
    queryParams: {
      limit: limit,
      offset: offset,
      with_users: withUsers
    }
  };
};
var getSavedAlbums = function getSavedAlbums() {
  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var withUsers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  return {
    endpoint: 'saves/albums',
    queryParams: {
      limit: limit,
      offset: offset,
      with_users: withUsers
    }
  };
};
var getSavedTracks = function getSavedTracks() {
  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var withUsers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  return {
    endpoint: 'saves/tracks',
    queryParams: {
      limit: limit,
      offset: offset,
      with_users: withUsers
    }
  };
};
/**
 * Return user collections (saved & uploaded) along w/ users for those collections
 */

var getUserAccount = function getUserAccount(wallet) {
  if (wallet === undefined) {
    throw new Error('Expected wallet to get user account');
  }

  return {
    endpoint: 'users/account',
    queryParams: {
      wallet: wallet
    }
  };
};
var getTopPlaylists = function getTopPlaylists(type, limit, mood, filter) {
  var withUsers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  return {
    endpoint: "/top/".concat(type),
    queryParams: {
      limit: limit,
      mood: mood,
      filter: filter,
      with_users: withUsers
    }
  };
};
var getTopFolloweeWindowed = function getTopFolloweeWindowed(type, window, limit) {
  var withUsers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  return {
    endpoint: "/top_followee_windowed/".concat(type, "/").concat(window),
    queryParams: {
      limit: limit,
      with_users: withUsers
    }
  };
};
var getTopFolloweeSaves = function getTopFolloweeSaves(type, limit) {
  var withUsers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  return {
    endpoint: "/top_followee_saves/".concat(type),
    queryParams: {
      limit: limit,
      with_users: withUsers
    }
  };
};
var getLatest = function getLatest(type) {
  return {
    endpoint: "/latest/".concat(type)
  };
};
var getTopCreatorsByGenres = function getTopCreatorsByGenres(genres) {
  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;
  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var withUsers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  return {
    endpoint: 'users/genre/top',
    queryParams: {
      genre: genres,
      limit: limit,
      offset: offset,
      with_users: withUsers
    }
  };
};
var getURSMContentNodes = function getURSMContentNodes(ownerWallet) {
  return {
    endpoint: 'ursm_content_nodes',
    queryParams: {
      owner_wallet: ownerWallet
    }
  };
};
var getNotifications = function getNotifications(minBlockNumber, trackIds, timeout) {
  return {
    endpoint: 'notifications',
    queryParams: {
      min_block_number: minBlockNumber,
      track_id: trackIds
    },
    timeout: timeout
  };
};
var getSolanaNotifications = function getSolanaNotifications(minSlotNumber, timeout) {
  return {
    endpoint: 'solana_notifications',
    queryParams: {
      min_slot_number: minSlotNumber
    },
    timeout: timeout
  };
};
var getTrackListenMilestones = function getTrackListenMilestones(timeout) {
  return {
    endpoint: 'track_listen_milestones',
    timeout: timeout
  };
};
var getChallengeAttestation = function getChallengeAttestation(challengeId, encodedUserId, specifier, oracleAddress) {
  return {
    endpoint: "/v1/challenges/".concat(challengeId, "/attest"),
    queryParams: {
      user_id: encodedUserId,
      specifier: specifier,
      oracle: oracleAddress
    }
  };
};
var getCreateSenderAttestation = function getCreateSenderAttestation(senderEthAddress) {
  return {
    endpoint: '/v1/challenges/attest_sender',
    queryParams: {
      sender_eth_address: senderEthAddress
    }
  };
};
var getUndisbursedChallenges = function getUndisbursedChallenges(limit, offset, completedBlockNumber, encodedUserId) {
  return {
    endpoint: '/v1/challenges/undisbursed',
    queryParams: {
      limit: limit,
      offset: offset,
      completed_blocknumber: completedBlockNumber,
      user_id: encodedUserId
    }
  };
};
var verifyToken = function verifyToken(token) {
  return {
    endpoint: '/v1/users/verify_token',
    queryParams: {
      token: token
    }
  };
};

var requests = /*#__PURE__*/Object.freeze({
    __proto__: null,
    getUsers: getUsers,
    getTracks: getTracks,
    getTracksByHandleAndSlug: getTracksByHandleAndSlug,
    getTracksIncludingUnlisted: getTracksIncludingUnlisted,
    getRandomTracks: getRandomTracks,
    getStemsForTrack: getStemsForTrack,
    getRemixesOfTrack: getRemixesOfTrack,
    getRemixTrackParents: getRemixTrackParents,
    getTrendingTracks: getTrendingTracks,
    getPlaylists: getPlaylists,
    getSocialFeed: getSocialFeed,
    getUserRepostFeed: getUserRepostFeed,
    getFollowIntersectionUsers: getFollowIntersectionUsers,
    getTrackRepostIntersectionUsers: getTrackRepostIntersectionUsers,
    getPlaylistRepostIntersectionUsers: getPlaylistRepostIntersectionUsers,
    getFollowersForUser: getFollowersForUser,
    getFolloweesForUser: getFolloweesForUser,
    getRepostersForTrack: getRepostersForTrack,
    getRepostersForPlaylist: getRepostersForPlaylist,
    getSaversForTrack: getSaversForTrack,
    getSaversForPlaylist: getSaversForPlaylist,
    searchFull: searchFull,
    searchAutocomplete: searchAutocomplete,
    searchTags: searchTags,
    getSavedPlaylists: getSavedPlaylists,
    getSavedAlbums: getSavedAlbums,
    getSavedTracks: getSavedTracks,
    getUserAccount: getUserAccount,
    getTopPlaylists: getTopPlaylists,
    getTopFolloweeWindowed: getTopFolloweeWindowed,
    getTopFolloweeSaves: getTopFolloweeSaves,
    getLatest: getLatest,
    getTopCreatorsByGenres: getTopCreatorsByGenres,
    getURSMContentNodes: getURSMContentNodes,
    getNotifications: getNotifications,
    getSolanaNotifications: getSolanaNotifications,
    getTrackListenMilestones: getTrackListenMilestones,
    getChallengeAttestation: getChallengeAttestation,
    getCreateSenderAttestation: getCreateSenderAttestation,
    getUndisbursedChallenges: getUndisbursedChallenges,
    verifyToken: verifyToken
});

exports.AUDIO_DECMIALS = AUDIO_DECMIALS;
exports.CURRENT_USER_EXISTS_LOCAL_STORAGE_KEY = CURRENT_USER_EXISTS_LOCAL_STORAGE_KEY;
exports.DiscoveryAPI = requests;
exports.IdentityAPI = requests$1;
exports.WAUDIO_DECMIALS = WAUDIO_DECMIALS;
//# sourceMappingURL=core.js.map
